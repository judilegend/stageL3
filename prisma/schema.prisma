generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

model Portfolio {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  projects    Project[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Project {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  portfolioId Int
  portfolio   Portfolio     @relation(fields: [portfolioId], references: [id])
  workPackages WorkPackage[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model WorkPackage {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  projectId   Int
  project     Project     @relation(fields: [projectId], references: [id])
  activities  Activity[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Activity {
  id            Int         @id @default(autoincrement())
  title         String
  description   String?
  workPackageId Int
  workPackage   WorkPackage @relation(fields: [workPackageId], references: [id])
  tasks         Task[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  activityId  Int
  activity    Activity  @relation(fields: [activityId], references: [id])
  assignedTo  User?     @relation(fields: [userId], references: [id])
  userId      Int?
  priority    Priority  @default(NORMAL)
  urgency     Urgency   @default(NORMAL)
  times       Time[]
  sprint      Sprint?   @relation(fields: [sprintId], references: [id])
  sprintId    Int?
  isBacklog   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Priority {
  HIGH
  NORMAL
  LOW
}

enum Urgency {
  URGENT
  NORMAL
  NOT_URGENT
}

model Time {
  id        Int      @id @default(autoincrement())
  taskId    Int
  task      Task     @relation(fields: [taskId], references: [id])
  pomodoros Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sprint {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  tasks       Task[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
